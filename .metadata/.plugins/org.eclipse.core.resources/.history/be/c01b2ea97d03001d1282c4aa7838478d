package boardgame;

public class Board {
	
	private int rows;
	private int columns;
	private Piece[][] pieces; // declarado uma matriz de peças;
	
	public Board(int rows, int columns) {
		if (rows < 1 || columns < 1) {
			throw new BoardException("Error creating board: there must be at least 1 row and 1 column");
		}
		this.rows = rows;
		this.columns = columns;
		pieces = new Piece[rows][columns]; // matriz de peças instanciada no construtor;
	}
	public int getRows() {
		return rows;
	}

	public int getColumns() {
		return columns;
	}
	
	public Piece piece(int row, int column) {
		return pieces[row][column];
	}
	
	public Piece piece(Position position) {
		return pieces[position.getRow()][position.getColumn()];
	}
	
	public void placePiece(Piece piece, Position position) {
		pieces[position.getRow()][position.getColumn()] = piece; // pegando a matriz na posição dada e atribuindo a peça informada;
		piece.position = position; // peça não está mais na posição NULA, está nesta posição informada; conseguimos acessar livremente a peça, pois a mesma foi declarada como protected no mesmo pacote;
	}
	
	private boolean positionExists(int row, int column) { 
		return row >= 0 && row < rows && column >= 0 && column < columns; // rows = altura do tabuleiro; columns = qtde de colunas do tabuleiro;
	}
	
	public boolean positionExists(Position position) {
		return positionExists(position.getRow(), position.getColumn());
	}
	
	public boolean thereIsAPiece(Position position) {
		return piece(position) != null;
	}
}